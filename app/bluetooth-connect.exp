#!/usr/bin/expect -f

send_user -- "----> Attempting to connect to: $env(BT_DEVICE) with PIN $env(BT_PIN)\n\n"

set timeout -1

spawn bluetoothctl
expect -re {(?:^|\r|\n).{0,8}\[bluetooth\].{0,8}# }
send "pairable on\n"
expect -re {(?:^|\r|\n).{0,8}\[bluetooth\].{0,8}# }
send "agent on\n"
expect "Agent registered"

expect -re {(?:^|\r|\n).{0,8}\[bluetooth\].{0,8}# }
send "default-agent\n"
expect "Default agent request successful"

set timeout 3
set paired False
expect -re {(?:^|\r|\n).{0,8}\[bluetooth\].{0,8}# }
send "paired-devices\n"
expect "Device $env(BT_DEVICE)" {
  set paired True
  send_user "\n----> Already paired\n"
}
set timeout -1

if { $paired == False } {
  send_user "\n----> Attempting to pair\n"

  expect -re {(?:^|\r|\n).{0,8}\[bluetooth\].{0,8}# }
  send "scan on\n"
  expect "Device *$env(BT_DEVICE)"
  expect -re {(?:^|\r|\n).{0,8}\[bluetooth\].{0,8}# }
  send "scan off\n"

  expect -re {(?:^|\r|\n).{0,8}\[bluetooth\].{0,8}# }
  send "trust $env(BT_DEVICE)\n"
  expect "trust succeeded"

  # some devices take a bit before they are pairable
  sleep 2

  expect -re {(?:^|\r|\n).{0,8}\[bluetooth\].{0,8}# }
  send "pair $env(BT_DEVICE)\n"
  expect "Enter PIN code:"
  send "$env(BT_PIN)\n"

  expect "Pairing successful"
  send_user "\n----> Pairing succesful\n"
}

send_user "\n----> Attempting to connect\n"
expect -re {(?:^|\r|\n).{0,8}\[bluetooth\].{0,8}# }
send "connect $env(BT_DEVICE)\n"
expect "Connection successful"
expect -re {(?:^|\r|\n).{0,8}\[[^\]]+\].{0,8}# }
send "exit\n"

send_user "\n----> Connection successful\n"

send_user "\n----> Ensuring A2DP\n"
sleep 2
regsub -all ":" "bluez_card.$env(BT_DEVICE)" "_" bluez_card
set pa_cards [ exec pactl list cards ]
regexp "\n\tName: $bluez_card\n.*?\n\tActive Profile: (.*?)\n" $pa_cards ignore pa_active_profile

if { $pa_active_profile == "a2dp_sink" } {
  send_user "\n----> A2DP connected\n"
} else {

  send_user "\n----> Switching profile to 'off'\n"
  exec pactl set-card-profile $bluez_card off

  send_user "\n----> Reconnecting\n"
  spawn bluetoothctl
  expect -re {(?:^|\r|\n).{0,8}\[[^\]]+\].{0,8}# }
  send "disconnect $env(BT_DEVICE)\n"
  expect "Successful disconnected"
  expect -re {(?:^|\r|\n).{0,8}\[[^\]]+\].{0,8}# }
  send "connect $env(BT_DEVICE)\n"
  expect "Connection successful"
  expect -re {(?:^|\r|\n).{0,8}\[[^\]]+\].{0,8}# }
  send "exit\n"

  send_user "\n----> Switching profile to 'a2dp_sink'\n"
  sleep 2
  exec pactl set-card-profile $bluez_card a2dp_sink

  set pa_cards [ exec pactl list cards ]
  regexp "\n\tName: $bluez_card\n.*?\n\tActive Profile: (.*?)\n" $pa_cards ignore pa_active_profile

  if { $pa_active_profile == "a2dp_sink" } {
    send_user "\n----> A2DP connected\n"
  } else {
    send_error "\n----> Could not confirm A2DP connection\n"
  }

}
